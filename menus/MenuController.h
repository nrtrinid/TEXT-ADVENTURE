#pragma once

#include "MenuRegistry.h"
#include "core/GameState.h"
#include "core/MenuNavigator.h"
#include "core/CommandProcessor.h"
#include <memory>
#include <string>
#include <vector>

class MenuController : public MenuNavigator
{
public:
	MenuController(MenuRegistry& menuRegistry, GameState& gameState);
	
	// UI helpers
	void displayCurrentMenu(size_t selectedIndex) const;                    // display the current menu
	void processInput(size_t choice);                                       // process the user's input

	const std::string& getCurrentMenuID() const;                          // getter for menu name

	//menuNavigator implementation
	void pushMenu(std::shared_ptr<Menu>) override;
	void popMenu() override;
	void gotoMenu(const std::string& id, bool remember = false) override;

	Menu activeMenu() const;


private:
	void executeCommands(const CommandList& commands);          // executes a list of commands generated by MenuOption
	void returnToPreviousMenu();

	MenuRegistry& menuRegistry_;                                // reference to the menu registry
	GameState& gameState_;                                      // reference to the game state
	CommandProcessor commandProcessor_;

	std::string currentMenuID_;
	std::vector <std::string> idStack_;                         // stack of previous menu IDs
	std::vector<std::shared_ptr<Menu>> dynamicStack_;            // holds runtime menus
};